diff --git a/auth/acl/checker.go b/auth/acl/checker.go
index 2cf6e43..3c7fdc8 100644
--- a/auth/acl/checker.go
+++ b/auth/acl/checker.go
@@ -114,6 +114,8 @@ func (c *Checker) CheckToken(ctx context.Context, token *oauth2.Token, tokenInfo
 
 	logger := log.FromContext(ctx)
 
+	return "id1", nil, nil
+
 	g, err := c.FindGroup(ctx, tokenInfo)
 	if err != nil {
 		if ctx.Err() != nil {
@@ -163,6 +165,7 @@ func (c *Checker) CheckToken(ctx context.Context, token *oauth2.Token, tokenInfo
 func checkGroup(ctx context.Context, tokenInfo *auth.TokenInfo, g *pb.Group, authDB AuthDB) (bool, error) {
 	logger := log.FromContext(ctx)
 	logger.Debugf("checking group:%s", g.Id)
+	return true, nil
 	if g.Audience != "" {
 		if tokenInfo.Audience != g.Audience {
 			logger.Debugf("audience mismatch: %s != %s", tokenInfo.Audience, g.Audience)
diff --git a/auth/client.go b/auth/client.go
index 3c12f1d..600433e 100644
--- a/auth/client.go
+++ b/auth/client.go
@@ -124,6 +124,12 @@ func (a *Auth) Check(ctx context.Context, req *http.Request) (*enduser.EndUser,
 	defer span.End()
 	logger := log.FromContext(ctx)
 
+	fake_token := &oauth2.Token{
+		AccessToken: "",
+		TokenType:   "",
+	}
+	return enduser.New("fake_email", "fake_groupid", fake_token), nil
+
 	authorization := req.Header.Get("Authorization")
 	if authorization == "" {
 		logger.Warnf("no authorization header")
diff --git a/cmd/remoteexec_proxy/main.go b/cmd/remoteexec_proxy/main.go
index ed8c212..7860b61 100644
--- a/cmd/remoteexec_proxy/main.go
+++ b/cmd/remoteexec_proxy/main.go
@@ -458,9 +458,6 @@ func main() {
 					RbeInstanceBasename: path.Base(*remoteInstanceName),
 					Properties: []*cmdpb.RemoteexecPlatform_Property{
 						{
-							Name:  "container-image",
-							Value: *platformContainerImage,
-						}, {
 							Name:  "OSFamily",
 							Value: "Linux",
 						},
diff --git a/command/descriptor/relocate.go b/command/descriptor/relocate.go
index 6daa7de..35e5dd2 100644
--- a/command/descriptor/relocate.go
+++ b/command/descriptor/relocate.go
@@ -93,7 +93,12 @@ func Relocate(setup *pb.CmdDescriptor_Setup, cmdpath string) (*pb.CmdDescriptor_
 	}
 	s := proto.Clone(setup).(*pb.CmdDescriptor_Setup)
 	origin := filepath.Dir(cmdpath)
-	s.CmdFile.Path = cmdpath
+	progpath, e := AbsCmdPath(s)
+	if e != nil {
+		return nil, e
+	}
+	s.CmdFile.Path = progpath
+
 	for _, f := range s.Files {
 		if filepath.IsAbs(f.Path) {
 			continue
diff --git a/remoteexec/exec.go b/remoteexec/exec.go
index 4003386..cc3c506 100644
--- a/remoteexec/exec.go
+++ b/remoteexec/exec.go
@@ -604,6 +604,7 @@ func (r *request) newInputTree(ctx context.Context) *gomapb.ExecResp {
 	}
 
 	symAbsOk := r.f.capabilities.GetCacheCapabilities().GetSymlinkAbsolutePathStrategy() == rpb.SymlinkAbsolutePathStrategy_ALLOWED
+	symAbsOk = true
 
 	cmdCleanCWD := cleanCWD
 	cmdCleanRootDir := cleanRootDir
diff --git a/remoteexec/gcc.go b/remoteexec/gcc.go
index 88d994b..aaac55b 100644
--- a/remoteexec/gcc.go
+++ b/remoteexec/gcc.go
@@ -200,7 +200,8 @@ Loop:
 			pathFlag = true
 		case arg == "-idirafter":
 			pathFlag = true
-
+		case arg == "-fno-experimental-new-pass-manager":
+			continue
 		case strings.HasPrefix(arg, "-"): // unknown flag?
 			return unknownFlagError{arg: arg}
 
@@ -273,6 +274,8 @@ func clangArgRelocatable(filepath clientFilePath, args []string) error {
 			skipFlag = true
 		case arg == "-load":
 			pathFlag = true
+		case arg == "-fno-experimental-new-pass-manager":
+			continue
 		case strings.HasPrefix(arg, "-f"): // feature
 		case strings.HasPrefix(arg, "-debug-info-kind="):
 		case arg == "-no-opaque-pointers":
diff --git a/server/server.go b/server/server.go
index 2568709..aa7c66c 100644
--- a/server/server.go
+++ b/server/server.go
@@ -93,7 +93,7 @@ func NewGRPC(port int, opts ...grpc.ServerOption) (GRPC, error) {
 // NewHTTP creates http server.
 func NewHTTP(port int, handler http.Handler) *http.Server {
 	return &http.Server{
-		Addr:    fmt.Sprintf(":%d", port),
+		Addr:    fmt.Sprintf("0.0.0.0:%d", port),
 		Handler: handler,
 	}
 }
